<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<context:property-placeholder location="classpath:common.properties"
		ignore-unresolvable="true" />

	<context:component-scan base-package="cherry.spring.common" />

	<tx:annotation-driven />

	<aop:config>
		<aop:advisor advice-ref="traceInterceptor"
			pointcut="execution(* cherry.spring..*.*(..))
				and
				!execution(* cherry.spring.common.log..*.*(..))
				and
				!execution(* cherry.spring.common.custom..*.*(..))
				and
				!execution(* cherry.spring.common.helper.crypto..*.*(..))
				" />
	</aop:config>

	<bean id="traceInterceptor" class="cherry.spring.common.log.trace.TraceInterceptor">
		<property name="arrayLengthLimit" value="${common.trace.arrayLengthLimit}" />
		<property name="objectLengthLimit" value="${common.trace.objectLengthLimit}" />
		<property name="packagePrefix">
			<list>
				<value>cherry.spring</value>
			</list>
		</property>
	</bean>

	<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="java.util.ResourceBundle"
					value="org.springframework.beans.propertyeditors.ResourceBundleEditor" />
			</map>
		</property>
	</bean>

	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="registerDefaultFormatters" value="false" />
		<property name="formatters">
			<set>
				<bean
					class="org.springframework.format.number.NumberFormatAnnotationFormatterFactory" />
				<bean
					class="org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory" />
				<bean
					class="cherry.spring.common.custom.format.CustomDateTimeFormatAnnotationFormatterFactory" />
				<bean
					class="cherry.spring.common.custom.format.IpAddrFormatAnnotationFormatterFactory" />
			</set>
		</property>
		<property name="formatterRegistrars">
			<set>
				<bean class="org.springframework.format.datetime.DateFormatterRegistrar" />
			</set>
		</property>
		<property name="converters">
			<set>
				<bean class="cherry.spring.common.custom.converter.LocalDateConverter" />
				<bean class="cherry.spring.common.custom.converter.LocalTimeConverter" />
				<bean class="cherry.spring.common.custom.converter.LocalDateTimeConverter" />
				<bean class="cherry.spring.common.custom.converter.SecureStringConverter" />
				<bean class="cherry.spring.common.custom.converter.SecureIntegerConverter" />
				<bean class="cherry.spring.common.custom.converter.SecureLongConverter" />
				<bean
					class="cherry.spring.common.custom.converter.SecureBigIntegerConverter" />
				<bean
					class="cherry.spring.common.custom.converter.SecureBigDecimalConverter" />
				<bean class="cherry.spring.common.custom.converter.DeletedFlagConverter" />
				<bean class="cherry.spring.common.custom.converter.FlagCodeConverter" />
			</set>
		</property>
	</bean>

	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<bean id="objectMapper"
		class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
		<property name="modules">
			<array>
				<bean class="com.fasterxml.jackson.datatype.joda.JodaModule" />
			</array>
		</property>
		<property name="featuresToDisable">
			<array>
				<util:constant
					static-field="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS" />
			</array>
		</property>
	</bean>

	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${common.mail.host}" />
		<property name="port" value="${common.mail.port}" />
		<property name="protocol" value="${common.mail.protocol}" />
		<property name="defaultEncoding" value="${common.mail.encoding}" />
	</bean>

	<bean id="namedParameterJdbcOperations"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="sqlQueryOperations" class="cherry.spring.common.lib.querydsl.SQLQueryTemplate">
		<constructor-arg ref="dataSource" />
		<constructor-arg>
			<bean class="com.mysema.query.sql.H2Templates" />
		</constructor-arg>
	</bean>

	<bean class="cherry.spring.common.helper.async.AsyncProcDaoImpl" />
	<bean class="cherry.spring.common.helper.async.AsyncProcHelperImpl" />
	<bean class="cherry.spring.common.helper.bizdate.BizdateDaoImpl" />
	<bean class="cherry.spring.common.helper.bizdate.BizdateHelperImpl" />
	<bean class="cherry.spring.common.helper.download.DownloadHelperImpl" />
	<bean class="cherry.spring.common.helper.json.JsonHelperImpl" />
	<bean class="cherry.spring.common.helper.mail.MailMessageDaoImpl" />
	<bean class="cherry.spring.common.helper.mail.MailMessageHelperImpl" />
	<bean class="cherry.spring.common.helper.onetimetoken.OneTimeTokenIssuerImpl" />
	<bean
		class="cherry.spring.common.helper.onetimetoken.OneTimeTokenValidatorImpl" />
	<bean class="cherry.spring.common.helper.querydsl.SQLQueryHelperImpl" />
	<bean class="cherry.spring.common.helper.sql.SqlExecutorImpl" />
	<bean class="cherry.spring.common.helper.sql.SqlLoaderImpl" />

	<bean class="cherry.spring.common.lib.sql.SimpleSqlParser" />
	<bean class="cherry.spring.common.lib.etl.ExtractorImpl" />
	<bean class="cherry.spring.common.lib.etl.LoaderImpl" />

	<bean class="cherry.spring.common.helper.password.UserPasswordDaoImpl" />
	<bean class="cherry.spring.common.helper.signup.SignupRequestDaoImpl" />

	<bean class="cherry.spring.common.custom.SecureString"
		factory-method="setEncoder">
		<constructor-arg>
			<bean class="cherry.spring.common.helper.crypto.SecureStringHelper">
				<property name="charset" value="UTF-8" />
				<property name="cipherHelper" ref="aesCipherHelper" />
			</bean>
		</constructor-arg>
	</bean>

	<bean class="cherry.spring.common.custom.SecureInteger"
		factory-method="setEncoder">
		<constructor-arg>
			<bean class="cherry.spring.common.helper.crypto.SecureIntegerHelper">
				<property name="cipherHelper" ref="aesCipherHelper" />
			</bean>
		</constructor-arg>
	</bean>

	<bean class="cherry.spring.common.custom.SecureLong"
		factory-method="setEncoder">
		<constructor-arg>
			<bean class="cherry.spring.common.helper.crypto.SecureLongHelper">
				<property name="cipherHelper" ref="aesCipherHelper" />
			</bean>
		</constructor-arg>
	</bean>

	<bean class="cherry.spring.common.custom.SecureBigInteger"
		factory-method="setEncoder">
		<constructor-arg>
			<bean class="cherry.spring.common.helper.crypto.SecureBigIntegerHelper">
				<property name="cipherHelper" ref="aesCipherHelper" />
			</bean>
		</constructor-arg>
	</bean>

	<bean class="cherry.spring.common.custom.SecureBigDecimal"
		factory-method="setEncoder">
		<constructor-arg>
			<bean class="cherry.spring.common.helper.crypto.SecureBigDecimalHelper">
				<property name="cipherHelper" ref="aesCipherHelper" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="aesCipherHelper"
		class="cherry.spring.common.helper.crypto.VersionedCipherHelper">
		<property name="defaultVersion" value="0" />
		<property name="cipherHelperMap">
			<map key-type="java.lang.Integer" value-type="cherry.spring.common.helper.crypto.CipherHelper">
				<entry key="0">
					<bean class="cherry.spring.common.helper.crypto.AESCipherHelper">
						<property name="secretKey" value="classpath:crypto/0/key.bin" />
						<property name="initVector" value="classpath:crypto/0/iv.bin" />
						<property name="keyCipherHelper" ref="rsaCipherHelper" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>

	<bean id="rsaCipherHelper" class="cherry.spring.common.helper.crypto.RSACipherHelper">
		<property name="keyLoader">
			<bean class="cherry.spring.common.helper.crypto.RSAKeyLoader" />
		</property>
		<property name="privateKey" value="classpath:crypto/rsa/privkey.pk8" />
		<property name="publicKey" value="classpath:crypto/rsa/pubkey.der" />
	</bean>

</beans>
